---
title: "Authoring Manuscripts"
article-file: "index.ipynb"
template-repo: "https://github.com/cwickham/manuscript-template"
tool: "Jupyter Lab"
---

{{< include ../_tool-chooser.md >}}

## Overview

On this page, we'll show you how to author an academic manuscript with Quarto in {{< meta tool >}}. You'll learn how to:

-   Preview your manuscript using the Quarto command line tool.

-   Add scholarly front matter to describe your article.

-   Add things like figures, tables, cross references and citations with Quarto specific markdown.

-   Include output from computations using inline code, or embedded from external notebooks.

### Is this tutorial for me?

We will assume you:

-   are comfortable using Jupyter Lab to open and edit files,
-   have a GitHub account,
-   are comfortable using git to manage local projects (e.g. you can stage and commit changes), and GitHub as a remote repository (e.g. you can clone repos from GitHub and push your changes to GitHub), and
-   are comfortable navigating your file system, and executing commands in a Terminal.

## Setup

To follow along, you'll need to install the Jupyter Lab Quarto extension and clone the template repository.

::: callout-important
## Install Quarto First

If you haven't already, make sure you've installed the pre-release version of Quarto, as described in the [Manuscript Overview](../index.qmd#install).
:::

### Install the Jupyter Lab Quarto Extension

{{< include /docs/tools/_jupyter-lab-extension-install.qmd >}}

### Clone the Template Repository {#clone-repo}

To follow this tutorial you'll need your own copy of the [template repository](%7B%7B%3C%20meta%20template-repo%20%3E%7D%7D).

1.  Head to [GitHub to create a new repository from the template](%7B%7B%3C%20meta%20template-repo%20%3E%7D%7D/generate).

    Provide a "Repository Name" and make sure you check the box "Include all branches". Then "Create repository from template". ![](images/github-create-from-template.png){fig-alt="Screenshot of GitHub's create a new repo from a template page. Repository name has been filled with manuscript-template, and the box labelled Include all branches is checked."}

2.  Once your repository is created, clone it to your local computer. You can do this any way you are comfortable, but for instance in the Terminal, it might look like:

    ``` {.bash filename="Terminal"}
    git clone https://github.com/cwickham/manuscript-tutorial.git
    ```

    Where you use your own user name and repo name.

3.  You'll be working inside this directory throughout the tutorial, so if you are ready to proceed, navigate inside the directory, and start Jupyter Lab:

    ``` {.bash filename="Terminal"}
    cd manuscript-tutorial
    python3 -m jupyter lab
    ```

    ADD SCREENSHOT of Jupyterlab open with files pane open showing directory structure.

## Project Orientation

As we mentioned in the Overview, a Quarto manuscript consists of at least two files: a notebook where you write your article, and a configuration file `_quarto.yml`. As a {{< meta tool >}} user, you'll write your article in a notebook called {{< meta article-file >}}.

This particular manuscript project includes some other files and folders, some of which are common in any project hosted on GitHub: `.github/`, `.gitignore`, `README.md`; and others are specific to this manuscript: `_extensions/`, `images/`, `notebooks/`, and `references.bib`. You'll learn about these manuscript specific files as you work through this authoring page.

## Workflow

The basic workflow for writing a manuscript in Quarto is to make changes to your article content in {{< meta article-file >}}, preview the changes with Quarto, and repeat. Let's try it out.

Open a new Terminal in {{< meta tool >}} and run:

``` {.bash filename="Terminal"}
quarto preview
```

You'll see some output from Quarto on the Terminal:

``` {.bash filename="Terminal"}
‚ùØ quarto preview
Preparing to preview
[1/2] notebooks/data-screening.ipynb
[2/2] index.ipynb

Creating MECA Archive...
Watching files for changes
Browse at http://localhost:6283/
GET: /
```

And then, a browser window will open with a live preview of the manuscript. You may find it helpful to move and resize your windows so that Jupyter Lab and live preview are side by side.

ADD SCREENSHOT of Jupyterlab with Terminal open, side by side with preview.

The contents of the article is generated by {{< meta article-file >}}. Go ahead and open this file in {{< meta tool >}}. You'll dive into the details of this file next, but for now let's make a change and see what happens.

The first cell (starting with "La Palma Earthquakes") is a Markdown cell, enter Edit mode, and find the line:

``` yaml
title: La Palma Earthquakes
```

Change the line to:

``` yaml
title: La Palma Earthquake Mechanisms
```

Save the notebook, and you'll see the preview update automatically.

ADD SCREENSHOT that shows side by side: Jupyterlab with first cell in Edit mode and change made; and updated preview

::: callout-tip
If you close the preview accidentally, you can navigate to it again by using the URL from the output in the Terminal, e.g. `http://localhost:6283/`. If you want to stop the preview, hit Crtl + C in the Terminal. You can start the preview again by running `quarto preview`.
:::

## The structure of `index.ipynb`

The file `index.ipynb` is a Jupyter Notebook. Like any Jupyter Notebook it contains cells that could be raw, markdown or code. There are two features of this notebook that are Quarto specific:

-   The first cell contains a YAML header that is used to set document metadata, including scholarly front matter. This cell must start and end with a line of three dashes (`---`), and within these lines, content is parsed as YAML. You'll notice the cell itself is set to be a Markdown cell, this allows the Quarto Jupyter Lab Extension to visually emulate how some of these options will appear in the rendered document.

-   The other markdown cells use Quarto specific markdown syntax to include things like figures, tables, equations, cross references and citations.

The rest of this page walks you through the cells in this article from top to bottom, introducing you to the Quarto features you'll most likely need to write a scholarly article.

## Front Matter

{{< include _front-matter.qmd >}}

## Markdown

Markdown cells in the document will be processed by Quarto's specific markdown syntax. Quarto's markdown syntax is based on [Pandoc Markdown](https://pandoc.org/MANUAL.html#pandocs-markdown), which in turn is based on John Gruber\'s [Markdown](https://daringfireball.net/projects/markdown/), the same markdown Jupyter Notebooks use. You'll find much of the syntax, for example, text formatting like bold, italics, and verbatim code, as well as headings, links and lists familiar:

{{< include _markdown.qmd >}}

::: callout-tip

## Raw and Rendered Markdown

The Quarto extension for Jupyter Lab will display markdown cells as they will appear in rendered form. To see the raw markdown, enter "Edit mode" for the cell. To return to viewing the rendered markdown, "Run" the cell.

:::

## Figures

{{< include _figures.qmd >}}

## Tables

Captions 
Labels

https://quarto.org/docs/authoring/tables.html

You can also include tables directly from inline computations, see []() below for more details.

## Cross References

(Also link to how to add captions and cross references for plots/table that come from computations)

Already covered figures and tables. Cross references to equations and sections.

## Equations

## Citations

## Inline Computations

Captions and Cross References

## Embed Notebooks

## Up Next
