---
title: "Authoring Manuscripts"
article-file: "index.ipynb"
---

{{< include ../_tool-chooser.md >}}

## Overview

In this tutorial, we'll show you how write an academic manuscript with Quarto in Jupyter Lab. You'll learn how to:

-   Preview, render and publish your manuscript using the Quarto command line tools.

-   Add scholarly front matter to describe your article.

-   Add things like figures, tables, cross references and citations with Quarto specific markdown.

-   Control how Quarto produces your manuscript by changing options in `_quarto.yml`.

### Is this tutorial for me?

We will assume you:

-   have a GitHub account,
-   are comfortable using git to manage local projects (e.g. you can stage and commit changes), and GitHub as a remote repository (e.g. you can clone repos from GitHub and push your changes to GitHub), and
-   are comfortable navigating your file system, and executing commands in a Terminal.

On this page, you'll learn the workflow for authoring manuscripts in Quarto, as well as some of the special Quarto markdown syntax for common elements in articles.

ADD CALLOUT TO QUARTO INSTALL

## Install the Jupyter Lab Quarto Extension

{{< include /docs/tools/_jupyter-lab-extension-install.qmd >}}

## Clone the Template Repository {#clone-repo}

To follow this tutorial you'll need your own copy of the [template repository](https://github.com/cwickham/manuscript-template).

1.  Head to [GitHub to create a new repository from the template](https://github.com/cwickham/manuscript-template/generate). Provide a "Repository Name" and make sure you check the box "Include all branches". Then "Create repository from template". ![](images/github-create-from-template.png){fig-alt="Screenshot of GitHub's create a new repo from a template page. Repository name has been filled with manuscript-template, and the box labelled Include all branches is checked."}

2.  Once your repository is created clone it to your local computer. You can do this any way you are comfortable, but for instance in the Terminal, it might look like:

    ``` {.bash filename="Terminal"}
    git clone https://github.com/cwickham/manuscript-tutorial.git
    ```

    Where you use your own user name and repo name.

3.  You'll be working inside this directory throughout the tutorial, so if you are ready to proceed, navigate inside the directory, and start Jupyter Lab:

    ``` {.bash filename="Terminal"}
    cd manuscript-tutorial
    jupyter lab
    ```

    ADD SCREENSHOT of Jupyterlab open with files pane open showing driectory structure.
    

## Manuscript Source Files
    
-   A file where you write your article content, in this example, `index.ipynb`. This is a regular Jupyter Notebook with three differences:
    -   the first cell is used to describe document metadata including things like article front matter (authors, affiliations etc.) and Quarto options,
    -   other markdown cells can use special Quarto syntax to do things like cross references and citations, and
    -   if you include code cells, you can control if or how they appear in the article using special comments at the start of the cell.
-   A configuration file `_quarto.yml` that identifies the project as a Quarto manuscript and controls how your manuscript is put together.

This particular manuscript project includes some other files and folders, some of which are common in any project hosted on GitHub: `.github/`, `.gitignore`, `README.md`; and others are specific to this manuscript: `_extensions/`, `images/`, `notebooks/`, and `references.bib`. You can learn more about these file in the [Getting Started tutorial](ADD%20URL).
    

## Workflow

The basic workflow for writing a manuscript in Quarto is to make changes to your article content in `index.ipynb`, preview the changes with Quarto, and repeat. Let's try it out.

Start by navigating into the manuscript folder and opening Jupyter Lab:

``` {.bash filename="Terminal"}
cd manuscript-tutorial
jupyter lab
```

ADD SCREENSHOT of Jupyterlab open with files pane open showing directory structure.

Open a new Terminal in Jupyter Lab and run:

``` {.bash filename="Terminal"}
quarto preview
```

You'll see some output from Quarto on the Terminal:

``` {.bash filename="Terminal"}
‚ùØ quarto preview
Preparing to preview
[1/2] notebooks/data-screening.ipynb
[2/2] index.ipynb

Creating MECA Archive...
Watching files for changes
Browse at http://localhost:6283/
GET: /
```

And then, a browser window will open with a live preview of the manuscript. You may find it helpful to move and resize your windows so that Jupyter Lab and live preview are side by side.

ADD SCREENSHOT of Jupyterlab with Terminal open, side by side with preview.

The contents of the article is generated by `index.ipynb`. Go ahead and open this file in Jupyter Lab. You'll dive into the details of this file next, but for now let's make a change and see what happens.

The first cell (starting with "La Palma Earthquakes") is a Markdown cell, enter Edit mode, and find the line:

``` yaml
title: La Palma Earthquakes
```

Change the line to:

``` yaml
title: La Palma Earthquake Mechanisms
```

Save the notebook, and you'll see the preview update automatically.

ADD SCREENSHOT that shows side by side: Jupyterlab with first cell in Edit mode and change made; and updated preview

::: callout-tip
If you close the preview accidentally, you can navigate to it again by using the URL from the output in the Terminal, e.g. `http://localhost:6283/`. If you want to stop the preview, hit Crtl + C in the Terminal. You can start the preview again by running `quarto preview`.
:::

## The structure of `index.ipynb`

The file `index.ipynb` is a Jupyter Notebook. Like any Jupyter Notebook it contains cells that could be raw, markdown or code. There are two features of this notebook that are Quarto specific:

-   The first cell contains a YAML header that is used to set document metadata, including scholarly front matter. This cell must start and end with a line of three dashes (`---`), and within these lines, content is parsed as YAML. You'll notice the cell itself is set to be a Markdown cell, this allows the Quarto Jupyter Lab Extension to visually emulate how some of these options will appear in the rendered document.

-   The other markdown cells use Quarto specific markdown syntax to include things like figures, tables, equations, cross references and citations.

{{< include _front-matter.qmd >}}

## Markdown

Article content written in Markdown cells. Basic markdown understanding implied: bold, italics, section headings, links.

https://quarto.org/docs/authoring/markdown-basics.html

REST OF PAGE TO WALK THROUGH REMAINING CELLS IN TEMPLATE

## Images/Figures + Captions + Labels

## Tables + Captions + Labels

## Cross References

(Also link to how to add captions and cross references for plots/table that come from computations)

## Equations

## Citations
